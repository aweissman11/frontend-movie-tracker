// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchBar should match the snapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchBar
    filters={
      Object {
        "genre": null,
        "rating": null,
        "sort": null,
        "year": null,
      }
    }
    setFetchedMovies={[MockFunction]}
    setFilters={[MockFunction]}
    setSearchQuery={[MockFunction]}
    store={
      Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction],
        "subscribe": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "aria-label": "search-form",
      "children": Array [
        <input
          aria-label="search-input"
          className="search-input"
          name="searchInput"
          onChange={[Function]}
          placeholder="search"
          value=""
        />,
        <input
          aria-label="submit-search"
          className="search-submit"
          type="submit"
          value=""
        />,
      ],
      "className": "search-form",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "search-input",
          "className": "search-input",
          "name": "searchInput",
          "onChange": [Function],
          "placeholder": "search",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "submit-search",
          "className": "search-submit",
          "type": "submit",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "aria-label": "search-form",
        "children": Array [
          <input
            aria-label="search-input"
            className="search-input"
            name="searchInput"
            onChange={[Function]}
            placeholder="search"
            value=""
          />,
          <input
            aria-label="submit-search"
            className="search-submit"
            type="submit"
            value=""
          />,
        ],
        "className": "search-form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "search-input",
            "className": "search-input",
            "name": "searchInput",
            "onChange": [Function],
            "placeholder": "search",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "submit-search",
            "className": "search-submit",
            "type": "submit",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
